name: Build image and push

on:
  # NOTE: Runs on branch or tag creation.
  create:
    branches: [ main ]
  schedule:
    # Run every Sunday at 2am o'clock.
    - cron: '0 2 * * 0'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      architecture:
        default: all
        description: Architecture name to build for.
        type: choice
        options:
          - all
          - arm-64
          - x86-64
      build-args:
        description: List of build-time variables.
      no-cache:
        description: Do not use cache when building the image.
        default: false
        type: boolean
      tags:
        description: Image tags to use for registering.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  build-image-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: TODO Print
        shell: bash
        run: echo ${GITHUB_REF} and ${GITHUB_HEAD_REF}

      - name: Extract current branch name
        id: extract_branch
        shell: bash
        run: echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - name: Set resolved tag by given branch name.
        id: derive_tags
        if: contains(inputs.tags, 'CURRENT_BRANCH_NAME')
        shell: bash
        run: |
          tags="${{ inputs.tags }}"
          echo "tags=${tags//CURRENT_BRANCH_NAME/${{ steps.extract_branch.outputs.name }}}" >> $GITHUB_OUTPUT

      - name: TODO Print determined branch name and tag
        shell: bash
        run: |
          echo BRANCH ${{ steps.extract_branch.outputs.name }}
          echo DERIVED TAGS ${{ steps.derive_tags.outputs.tags }}

      #- uses: thaibault/build-image-push-action@main
      #  with:
      #    name: ${{ env.IMAGE_NAME }}
      #
      #    architecture: ${{ inputs.architecture || 'all' }}
      #    build-args: ${{ inputs.build-args }}
      #    no-cache: ${{ inputs.no-cache || false }}

      #    alternate-registry: docker.io
      #    alternate-username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    alternate-password: ${{ secrets.DOCKERHUB_TOKEN }}

      #    registry: ${{ env.REGISTRY }}
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}
