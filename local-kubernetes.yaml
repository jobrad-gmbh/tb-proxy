# Generation of Kubernetes YAML is still under development!
#
# Save the output of this file and use kubectl create -f to import
# it into Kubernetes.
#
# Created with podman-1.6.1
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2019-10-12T18:55:07Z"
  labels:
    app: proxy
  name: proxy
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - /usr/bin/initialize
    env:
    - name: PATH
      value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    - name: TERM
      value: xterm
    - name: HOSTNAME
      value: proxy
    - name: container
      value: podman
    - name: COMMAND
      value: nginx
    - name: STANDALONE
      value: "true"
    - name: ENCRYPTED_PATHS
      value: /application/encrypted/
    - name: DEFAULT_MAIN_USER_GROUP_ID
      value: "100"
    - name: INSTALLER_USER_NAME
      value: installer
    - name: MAIN_USER_GROUP_NAME
      value: users
    - name: KNOWN_HOSTS
    - name: ENVIRONMENT_FILE_PATHS
      value: /etc/dockerBase/environment.sh /application/serviceHandler/environment.sh
        /application/environment.sh
    - name: MAIN_USER_NAME
      value: application
    - name: PUBLIC_SSH_KEY
    - name: LANG
      value: en_US.UTF-8
    - name: APPLICATION_USER_ID_INDICATOR_FILE_PATH
      value: /etc/nginx/conf.d
    - name: BRANCH
      value: master
    - name: DECRYPT
      value: "false"
    - name: DEFAULT_MAIN_USER_ID
      value: "1000"
    - name: REPOSITORY_URL
      value: git@bitbucket.org:tsickert/base.git
    - name: APPLICATION_SPECIFIC_NGINX_CONFIGURATION_FILE_PATH
      value: ../../etc/nginx/conf.d/*.conf
    - name: PRIVATE_SSH_KEY
    - name: TEMPORARY_NGINX_PATH
      value: /tmp/nginx/
    - name: APPLICATION_PATH
      value: /application/
    - name: DECRYPTED_PATHS
      value: /tmp/plain/
    - name: INITIALIZING_FILE_PATH
      value: /usr/bin/initialize
    - name: PASSWORD_FILE_PATHS
      value: /application/.encryptionPassword
    image: docker.io/tsickert/proxy:latest
    name: tenderaryabhata
    ports:
    - containerPort: 80
      hostPort: 80
      protocol: TCP
    - containerPort: 443
      hostPort: 443
      protocol: TCP
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: false
      readOnlyRootFilesystem: false
      runAsUser: 0
    workingDir: /application/
status: {}

